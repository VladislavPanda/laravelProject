Заметки по Laravel

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

*** Вспомогательные инструменты Ларавель:

dd() - выводит данные и останавливает скрипт
dump() - то же, только без остановки
Коллекции - альтернатива массивам в Ларавель
asset() - генерирует путь (преобразуя в абсолютный) к ресурсам в папке public

***

*** Миграции:

php artisan make:model /* Название модели */ -m (создание модели и миграции для соответствующей таблицы)
php artisan migrate - накат всех миграций
php artisan migrate:rollback - откат всех миграций
При откате сначала откатываются миграции, созданные позднее
При создании модели вместе с миграцией Ларавель создаёт таблицу с названием во мн. числе
Для создания возможности sortDeletes в миграции создания таблицы прописываем $table->softDeletes();
Обновляем миграций: php artisan migrate:fresh
Пример создания новой миграции: php artisan make:migration add_column_description_to_posts_table (to_posts_table - ключевые слова для привязки миграции к нужной таблице)
Проверка корректности созданной миграции: накат->откат->накат

Для добавления колонок: 
1. В up: $table->тип('название')->nullable()->after('название колонки, после которой надо поставить новую'); // нужно ставить nullable() для корректной работы
2. В down: $table->dropColumn('название');
3. Выполнить накат миграций (php artisan migrate)

Для переименования колонки:
1. Установть библиотеку doctrine/DBAL: composer require doctrine/dbal
2. В up: $table->renameColumn('текущее_название', 'новое_название');
3. В down: $table->renameColumn('новое_название', 'текущее_название');
4. Выполнить накат миграций (php artisan migrate)

Для изменения типа поля:
0. 1. Установть библиотеку doctrine/DBAL: composer require doctrine/dbal
1. В up: $table->новый_тип('название_поля')->change();
2. В down: $table->текущий_тип('название_поля')->change();

***

*** Роутинг:

Для использования записи в роутах вида 'ControllerName@methodName' в app/Providers/RouteServiceProvider раскомментируем строку "protected $namespace = 'App\\Http\\Controllers';"
Если название роута состоит из нескольких слов, лучше разделять слова нижним подчёркиванием (например 'first_or_create')
Для правильного формирования ссылок (в href ссылок страницы) следует использовать именование роутов, к примеру: Route::get('posts', 'PostController@index')->name('post.index'); 
Пример записи ссылки на страницу: <li><a href=" {{ route('post.index') }}">Статьи</a></li>

***

*** Контроллеры:

Можно копировать контроллеры
Контроллеры именуются в единственном числе, например PostController

***

*** Модели:

Модели именуются в единственном числе с большой буквы, например: Post
Для явного указания того, с какой таблицей связана модель, используется свойство: protected $table = 'название таблицы'; (в практике следует указывать явно!)
Для того, чтобы дать разрешение на запись/изменение полей в таблице, в модели указываем protected $guarded = []; (или false), либо там же создаём protected массив fillable и указываем список атрибутов, разрешнных к работе

Получение данных из БД:
Пример операции получения данных по id: $post = Post::find(1); (метод find с передачей id)
Пример операции получения всех данных: $posts = Post::all(); (метод all)
Пример операции выборки по условию: Post::where('is_published', 1)->get(); (возвращается коллекция) ->first() - вернёт первый найденный элемент 
Чтобы находить записи в т.ч. в корзине: $post = Post::withTrashed()->find(3); 
Для восстановления записи: $post->restore();

Добавление данных в БД:
Post::create($item); // если добавляем целый массив, Post::create(['field1' => $value1, 'field2' => $value2]); // если добавляем поля по отдельности

Редактирование данных в БД: 
1. $post = Post::find(3); // находим редактируемый объект
2. $post->update(['title' => 'updated111', 'content' => 'updated111', /*'image' => 'updated', 'likes' => 10, 'is_published' => 1*/']); (Можно обновлять только нужные поля или все)

Удаление данных из БД (обычный подход):
1. $post = Post::find(3); // находим удаляемый объект
2. $post->delete();

Удаление данных из БД (softDeletes):
1. В миграции создания таблицы прописываем $table->softDeletes();
2. В модели добавляем трейт: use SoftDeletes; и подключаем его в файл: use Illuminate\Database\Eloquent\SoftDeletes;
3. Обновляем миграции php artisan migrate:fresh
4. Производим обычное удаление

Восстановление записи, удалённой через softDeletes:
1. $post = Post::withTrashed()->find(3); 
2. $post->restore();

Комбинированные методы создания и обновления данных:
1. firstOrCreate([// массив полей для проверки], [// массив данных для добавления]) - проверяет, есть в БД поля со значениями из 1 массива. Если есть - возвращает запись, если нет - создаёт запись со значениями полей 2 массива
Пример: $post = Post::firstOrCreate(['title' => 'value'], ['title' => 'new title', 'content' => 'new content' // и тд]); // если в БД есть запись со значением value в поле title - в $post вернётся эта запись, еесли нет, то создастся запись со значениями из 2 массива
2. updateOrCreate() - аналогично с п.1, только редактирование

***

*** Базы данных (общее):

Отличие Eloquent ORM от Database в том, что в Eloquent существует привязка к модели (и связанной с ней таблицы), а в Database QueryBuilder необходимо явно указывать имя таблицы

***

*** Отображения (view):

Пример отображения страницы из контроллера: return view('posts', compact('posts')); // 1 аргумент - название шаблона в resources/views, 2 аргумент - название переменной, которая передаётся на шаблон из контроллера
Пример отображения данных на шаблоне (blade): 
@foreach($posts as $post)
     <div> {{ $post->title }} </div>
@endforeach

Примерная структура отображений: resources/views/layouts/общие_шаблоны
Примерная запись секций (встраиваемых шаблонов):
@extends('layouts.main')
@section('content') // название секции
   // содержимое
@endsection

В родительском шаблоне:
// после разметки
@yield('content')

***

*** Для фронтенда:

Подключение user interface к проекту: composer require laravel/ui
Подключение bootstrap к проекту: php artisan ui bootstrap
Подключение npm: npm install
Перекомпиляция css и js: npm run dev // создаёт директории для css и js в public, обращение следует не к resources, а к public (в целях безопасности) 
Для подключения bootstrap на страницу: <link rel="stylesheet" href=" {{ asset('css/app.css') }} "> 
asset() - генерирует путь (преобразуя в абсолютный) к ресурсам в папке public

***
